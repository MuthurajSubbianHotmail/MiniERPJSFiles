async function createOAfromOrder(primaryControl) {
    document.body.style.cursor = 'wait'; // Set wait cursor
    var formContext = primaryControl;
    var OrdID = formContext.getAttribute("erp_name") ? formContext.getAttribute("erp_name").getValue() : null;
    var OrdCode = formContext.data.entity.getId();
    var CustCode = null, ContCode = null, ReqDelDate = null; SalesExec = null;

    var gridControl = formContext.getControl("OrdItemSubgrid"); // Replace with your subgrid name
    var selectedRows = gridControl.getGrid().getSelectedRows();

    if (selectedRows.getLength() <= 0) {
        showNoRowSelected();
        document.body.style.cursor = 'default';
        return;
    }

    if (formContext.getAttribute("erp_customer") && formContext.getAttribute("erp_customer").getValue() !== null) {
        var CustID = formContext.getAttribute("erp_customer").getValue();
        CustCode = CustID[0].id;
    } else {
        console.error("Customer ID is null or undefined.");
    }

    if (formContext.getAttribute("erp_customercontact") && formContext.getAttribute("erp_customercontact").getValue() !== null) {
        var ContID = formContext.getAttribute("erp_customercontact").getValue();
        ContCode = ContID[0].id;
    } else {
        console.error("Contact ID is null or undefined.");
    }

    if (formContext.getAttribute("erp_salesexecutive") && formContext.getAttribute("erp_salesexecutive").getValue() !== null) {
        var SalesExecID = formContext.getAttribute("erp_salesexecutive").getValue();
        SalesExec = SalesExecID[0].id;
    } else {
        console.error("Sales Exec ID is null or undefined.");
    }

    if (formContext.getAttribute("erp_reqdeliverydate") && formContext.getAttribute("erp_reqdeliverydate").getValue() !== null) {
        ReqDelDate = formContext.getAttribute("erp_reqdeliverydate").getValue();

        // Adjust for timezone
        var localToday = new Date(ReqDelDate);
        localToday.setMinutes(localToday.getMinutes() - localToday.getTimezoneOffset());
        ReqDelDate = localToday.toISOString().split("T")[0];

    }

    var newRecord = {};
    if (OrdCode) newRecord["erp_CustOrder@odata.bind"] = "/erp_orders(" + OrdCode.replace(/[{}]/g, '') + ")";
    if (CustCode) newRecord["erp_Customer@odata.bind"] = "/accounts(" + CustCode.replace(/[{}]/g, '') + ")";
    if (ContCode) newRecord["erp_CustomerContact@odata.bind"] = "/contacts(" + ContCode.replace(/[{}]/g, '') + ")";
    if (SalesExec) newRecord["erp_SalesExecutive@odata.bind"] = "/contacts(" + SalesExec.replace(/[{}]/g, '') + ")";
    if (ReqDelDate) newRecord["erp_reqdeldate"] = new Date(ReqDelDate).toISOString().split("T")[0];
    newRecord["erp_isautogenerated"] = true;

    console.log("Payload: ", newRecord);

    try {
        let result = await Xrm.WebApi.createRecord("erp_orderack", newRecord);
        console.log("Record created with ID: " + result.id);

        if (selectedRows.getLength() > 0) {
            selectedRows.forEach(async function (selectedRow) {
                var rowData = selectedRow.getData();
                var OrdItem = rowData.getEntity().getId().replace("{", "").replace("}", "");
                let OrdAckID = result.id;

                await createOAItems(OrdCode, OrdAckID, OrdItem);

            });
        }

        await showAlertWithLink(result.id);
        navigateToRecord("erp_orderack", result.id);
        document.body.style.cursor = 'default';
    } catch (error) {
        console.error("Error creating record: ", error);
        document.body.style.cursor = 'default';
    }
}


async function createOAItems(ParentCode, DestHeaderID, ChildItem) {
    ParentCode = ParentCode.replace(/[{}]/g, '');
    DestHeaderID = DestHeaderID.replace(/[{}]/g, '');
    var query = `?$filter=erp_orderitemid eq ${ChildItem}`;
    
    try {
        // Retrieve the records
        let result = await Xrm.WebApi.retrieveMultipleRecords("erp_orderitem", query);
        let recordCount = result.entities.length;

        // Loop through the retrieved records
        for (let record of result.entities) {
            let IsCancelled = record.erp_iscancelled;
            let IsRejected = record.erp_isrejected;
            
            if (IsCancelled == true || IsRejected == true) {
                continue;
            }
            
            let OAItemID = record.erp_orderitemid.replace(/[{}]/g, '');
            let OAQty = record.erp_orderqty;
            var PrevOAQty =  record.erp_oaqty ? record.erp_oaqty : null;
            //let PrevOAQty = record.erp_oaqty;
            let ProductID = record._erp_productcode_value.replace(/[{}]/g, '');
            let BalQty = OAQty - PrevOAQty;
            // Find Product Details to fill the Details
            var ProdQuery = `?$filter=erp_productmasterid eq ${ProductID}`;
            if (BalQty <= 0) {
                continue;
            }
            try {
                let resultP = await Xrm.WebApi.retrieveRecord("erp_productmaster", ProductID, ProdQuery);
                
                if (resultP) {
                    var ProdName = resultP.erp_productname;
                    var UnitPrice = resultP.erp_unitprice;
                    var Discount = resultP.erp_maxdisc;
                    var Tax = resultP.erp_tax;
                    var Units = resultP.erperp_units;
                    var MinOrdQty = resultP.erp_minordqty;
                    var MaxOrdQty = resultP.erp_maxordqty;

                    // Use these values to create the new record
                    let newRecord = {
                        "erp_OrderAckRefID@odata.bind": "/ord_invoices(" + DestHeaderID + ")",
                        "erp_OrderRefID@odata.bind": "/ord_oaheaders(" + ParentCode + ")",
                        "erp_OrderItemRefID@odata.bind": "/ord_oaitemses(" + OAItemID + ")",
                        "erp_ProductCodeRefID@odata.bind": "/ord_products(" + ProductID + ")",
                        "erp_oaqty": BalQty,
                        "erp_orderqty": OAQty,
                        "erp_productname": ProdName,
                        "erp_maxdisc": Discount,
                        "erp_discount": Discount,
                        "erp_unitprice": UnitPrice,
                        "erp_tax": Tax,
                        "erp_units": Units,
                        "erp_maxordqty": MaxOrdQty,
                        "erp_minordqty": MinOrdQty
                    };

                    try {
                        let createResult = await Xrm.WebApi.createRecord("erp_ordackitem", newRecord);
                        console.log("Record created with ID: " + createResult.id);
                    } catch (createError) {
                        console.error("Error creating record: ", createError.message);
                    }
                } else {
                    console.error("Product name not found.");
                }
            } catch (error) {
                console.error("Error retrieving product details: " + error.message);
            }
        }
    } catch (error) {
        console.error("Error retrieving records: ", error.message);
    }
}


async function showAlertWithLink(OAHeaderID) {
    var alertStrings = {
        confirmButtonLabel: "OK",
        text: "The Order Ack Has been Created",
        title: "OA Created Successfully"
    };

    var alertOptions = { height: 220, width: 360 };

    await Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
        function success(result) {
            console.log("Alert dialog closed");
        },
        function error(error) {
            console.log(error.message);
        }
    );
}

async function showNoRowSelected() {
    var alertStrings = {
        confirmButtonLabel: "OK",
        text: "Please Select Atleast 1 Row",
        title: "No Item Selected from OA for Invoice"
    };

    var alertOptions = { height: 220, width: 360 };

    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
        function success(result) {
            console.log("Alert dialog closed");
        },
        function error(error) {
            console.log(error.message);
        }
    );
}

function navigateToRecord(entityName, recordId) {
    var pageInput = {
        pageType: "entityrecord",
        entityName: entityName,
        entityId: recordId
    };
    var navigationOptions = {
        target: 1 // Opens in the same window
    };

    Xrm.Navigation.navigateTo(pageInput, navigationOptions).then(
        function success() {
            console.log("Navigation successful");
        },
        function error(error) {
            console.log("Navigation error: " + error.message);
        }
    );
}


